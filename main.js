x = [[-1, -1, -1, -1, -1, -1, -1, -1, -1],
[-1, -1, -1, -1, -1, -1, -1, -1, 1],
[-1, -1, -1, -1, -1, -1, -1, 1, -1],
[-1, -1, -1, -1, -1, -1, -1, 1, 1],
[-1, -1, -1, -1, -1, -1, 1, -1, -1],
[-1, -1, -1, -1, -1, -1, 1, -1, 1],
[-1, -1, -1, -1, -1, -1, 1, 1, -1],
[-1, -1, -1, -1, -1, -1, 1, 1, 1],
[-1, -1, -1, -1, -1, 1, -1, -1, -1],
[-1, -1, -1, -1, -1, 1, -1, -1, 1],
[-1, -1, -1, -1, -1, 1, -1, 1, -1],
[-1, -1, -1, -1, -1, 1, -1, 1, 1],
[-1, -1, -1, -1, -1, 1, 1, -1, -1],
[-1, -1, -1, -1, -1, 1, 1, -1, 1],
[-1, -1, -1, -1, -1, 1, 1, 1, -1],
[-1, -1, -1, -1, -1, 1, 1, 1, 1],
[-1, -1, -1, -1, 1, -1, -1, -1, -1],
[-1, -1, -1, -1, 1, -1, -1, -1, 1],
[-1, -1, -1, -1, 1, -1, -1, 1, -1],
[-1, -1, -1, -1, 1, -1, -1, 1, 1],
[-1, -1, -1, -1, 1, -1, 1, -1, -1],
[-1, -1, -1, -1, 1, -1, 1, -1, 1],
[-1, -1, -1, -1, 1, -1, 1, 1, -1],
[-1, -1, -1, -1, 1, -1, 1, 1, 1],
[-1, -1, -1, -1, 1, 1, -1, -1, -1],
[-1, -1, -1, -1, 1, 1, -1, -1, 1],
[-1, -1, -1, -1, 1, 1, -1, 1, -1],
[-1, -1, -1, -1, 1, 1, -1, 1, 1],
[-1, -1, -1, -1, 1, 1, 1, -1, -1],
[-1, -1, -1, -1, 1, 1, 1, -1, 1],
[-1, -1, -1, -1, 1, 1, 1, 1, -1],
[-1, -1, -1, -1, 1, 1, 1, 1, 1],
[-1, -1, -1, 1, -1, -1, -1, -1, -1],
[-1, -1, -1, 1, -1, -1, -1, -1, 1],
[-1, -1, -1, 1, -1, -1, -1, 1, -1],
[-1, -1, -1, 1, -1, -1, -1, 1, 1],
[-1, -1, -1, 1, -1, -1, 1, -1, -1],
[-1, -1, -1, 1, -1, -1, 1, -1, 1],
[-1, -1, -1, 1, -1, -1, 1, 1, -1],
[-1, -1, -1, 1, -1, -1, 1, 1, 1],
[-1, -1, -1, 1, -1, 1, -1, -1, -1],
[-1, -1, -1, 1, -1, 1, -1, -1, 1],
[-1, -1, -1, 1, -1, 1, -1, 1, -1],
[-1, -1, -1, 1, -1, 1, -1, 1, 1],
[-1, -1, -1, 1, -1, 1, 1, -1, -1],
[-1, -1, -1, 1, -1, 1, 1, -1, 1],
[-1, -1, -1, 1, -1, 1, 1, 1, -1],
[-1, -1, -1, 1, -1, 1, 1, 1, 1],
[-1, -1, -1, 1, 1, -1, -1, -1, -1],
[-1, -1, -1, 1, 1, -1, -1, -1, 1],
[-1, -1, -1, 1, 1, -1, -1, 1, -1],
[-1, -1, -1, 1, 1, -1, -1, 1, 1],
[-1, -1, -1, 1, 1, -1, 1, -1, -1],
[-1, -1, -1, 1, 1, -1, 1, -1, 1],
[-1, -1, -1, 1, 1, -1, 1, 1, -1],
[-1, -1, -1, 1, 1, -1, 1, 1, 1],
[-1, -1, -1, 1, 1, 1, -1, -1, -1],
[-1, -1, -1, 1, 1, 1, -1, -1, 1],
[-1, -1, -1, 1, 1, 1, -1, 1, -1],
[-1, -1, -1, 1, 1, 1, -1, 1, 1],
[-1, -1, -1, 1, 1, 1, 1, -1, -1],
[-1, -1, -1, 1, 1, 1, 1, -1, 1],
[-1, -1, -1, 1, 1, 1, 1, 1, -1],
[-1, -1, -1, 1, 1, 1, 1, 1, 1],
[-1, -1, 1, -1, -1, -1, -1, -1, -1],
[-1, -1, 1, -1, -1, -1, -1, -1, 1],
[-1, -1, 1, -1, -1, -1, -1, 1, -1],
[-1, -1, 1, -1, -1, -1, -1, 1, 1],
[-1, -1, 1, -1, -1, -1, 1, -1, -1],
[-1, -1, 1, -1, -1, -1, 1, -1, 1],
[-1, -1, 1, -1, -1, -1, 1, 1, -1],
[-1, -1, 1, -1, -1, -1, 1, 1, 1],
[-1, -1, 1, -1, -1, 1, -1, -1, -1],
[-1, -1, 1, -1, -1, 1, -1, -1, 1],
[-1, -1, 1, -1, -1, 1, -1, 1, -1],
[-1, -1, 1, -1, -1, 1, -1, 1, 1],
[-1, -1, 1, -1, -1, 1, 1, -1, -1],
[-1, -1, 1, -1, -1, 1, 1, -1, 1],
[-1, -1, 1, -1, -1, 1, 1, 1, -1],
[-1, -1, 1, -1, -1, 1, 1, 1, 1],
[-1, -1, 1, -1, 1, -1, -1, -1, -1],
[-1, -1, 1, -1, 1, -1, -1, -1, 1],
[-1, -1, 1, -1, 1, -1, -1, 1, -1],
[-1, -1, 1, -1, 1, -1, -1, 1, 1],
[-1, -1, 1, -1, 1, -1, 1, -1, -1],
[-1, -1, 1, -1, 1, -1, 1, -1, 1],
[-1, -1, 1, -1, 1, -1, 1, 1, -1],
[-1, -1, 1, -1, 1, -1, 1, 1, 1],
[-1, -1, 1, -1, 1, 1, -1, -1, -1],
[-1, -1, 1, -1, 1, 1, -1, -1, 1],
[-1, -1, 1, -1, 1, 1, -1, 1, -1],
[-1, -1, 1, -1, 1, 1, -1, 1, 1],
[-1, -1, 1, -1, 1, 1, 1, -1, -1],
[-1, -1, 1, -1, 1, 1, 1, -1, 1],
[-1, -1, 1, -1, 1, 1, 1, 1, -1],
[-1, -1, 1, -1, 1, 1, 1, 1, 1],
[-1, -1, 1, 1, -1, -1, -1, -1, -1],
[-1, -1, 1, 1, -1, -1, -1, -1, 1],
[-1, -1, 1, 1, -1, -1, -1, 1, -1],
[-1, -1, 1, 1, -1, -1, -1, 1, 1],
[-1, -1, 1, 1, -1, -1, 1, -1, -1],
[-1, -1, 1, 1, -1, -1, 1, -1, 1],
[-1, -1, 1, 1, -1, -1, 1, 1, -1],
[-1, -1, 1, 1, -1, -1, 1, 1, 1],
[-1, -1, 1, 1, -1, 1, -1, -1, -1],
[-1, -1, 1, 1, -1, 1, -1, -1, 1],
[-1, -1, 1, 1, -1, 1, -1, 1, -1],
[-1, -1, 1, 1, -1, 1, -1, 1, 1],
[-1, -1, 1, 1, -1, 1, 1, -1, -1],
[-1, -1, 1, 1, -1, 1, 1, -1, 1],
[-1, -1, 1, 1, -1, 1, 1, 1, -1],
[-1, -1, 1, 1, -1, 1, 1, 1, 1],
[-1, -1, 1, 1, 1, -1, -1, -1, -1],
[-1, -1, 1, 1, 1, -1, -1, -1, 1],
[-1, -1, 1, 1, 1, -1, -1, 1, -1],
[-1, -1, 1, 1, 1, -1, -1, 1, 1],
[-1, -1, 1, 1, 1, -1, 1, -1, -1],
[-1, -1, 1, 1, 1, -1, 1, -1, 1],
[-1, -1, 1, 1, 1, -1, 1, 1, -1],
[-1, -1, 1, 1, 1, -1, 1, 1, 1],
[-1, -1, 1, 1, 1, 1, -1, -1, -1],
[-1, -1, 1, 1, 1, 1, -1, -1, 1],
[-1, -1, 1, 1, 1, 1, -1, 1, -1],
[-1, -1, 1, 1, 1, 1, -1, 1, 1],
[-1, -1, 1, 1, 1, 1, 1, -1, -1],
[-1, -1, 1, 1, 1, 1, 1, -1, 1],
[-1, -1, 1, 1, 1, 1, 1, 1, -1],
[-1, -1, 1, 1, 1, 1, 1, 1, 1],
[-1, 1, -1, -1, -1, -1, -1, -1, -1],
[-1, 1, -1, -1, -1, -1, -1, -1, 1],
[-1, 1, -1, -1, -1, -1, -1, 1, -1],
[-1, 1, -1, -1, -1, -1, -1, 1, 1],
[-1, 1, -1, -1, -1, -1, 1, -1, -1],
[-1, 1, -1, -1, -1, -1, 1, -1, 1],
[-1, 1, -1, -1, -1, -1, 1, 1, -1],
[-1, 1, -1, -1, -1, -1, 1, 1, 1],
[-1, 1, -1, -1, -1, 1, -1, -1, -1],
[-1, 1, -1, -1, -1, 1, -1, -1, 1],
[-1, 1, -1, -1, -1, 1, -1, 1, -1],
[-1, 1, -1, -1, -1, 1, -1, 1, 1],
[-1, 1, -1, -1, -1, 1, 1, -1, -1],
[-1, 1, -1, -1, -1, 1, 1, -1, 1],
[-1, 1, -1, -1, -1, 1, 1, 1, -1],
[-1, 1, -1, -1, -1, 1, 1, 1, 1],
[-1, 1, -1, -1, 1, -1, -1, -1, -1],
[-1, 1, -1, -1, 1, -1, -1, -1, 1],
[-1, 1, -1, -1, 1, -1, -1, 1, -1],
[-1, 1, -1, -1, 1, -1, -1, 1, 1],
[-1, 1, -1, -1, 1, -1, 1, -1, -1],
[-1, 1, -1, -1, 1, -1, 1, -1, 1],
[-1, 1, -1, -1, 1, -1, 1, 1, -1],
[-1, 1, -1, -1, 1, -1, 1, 1, 1],
[-1, 1, -1, -1, 1, 1, -1, -1, -1],
[-1, 1, -1, -1, 1, 1, -1, -1, 1],
[-1, 1, -1, -1, 1, 1, -1, 1, -1],
[-1, 1, -1, -1, 1, 1, -1, 1, 1],
[-1, 1, -1, -1, 1, 1, 1, -1, -1],
[-1, 1, -1, -1, 1, 1, 1, -1, 1],
[-1, 1, -1, -1, 1, 1, 1, 1, -1],
[-1, 1, -1, -1, 1, 1, 1, 1, 1],
[-1, 1, -1, 1, -1, -1, -1, -1, -1],
[-1, 1, -1, 1, -1, -1, -1, -1, 1],
[-1, 1, -1, 1, -1, -1, -1, 1, -1],
[-1, 1, -1, 1, -1, -1, -1, 1, 1],
[-1, 1, -1, 1, -1, -1, 1, -1, -1],
[-1, 1, -1, 1, -1, -1, 1, -1, 1],
[-1, 1, -1, 1, -1, -1, 1, 1, -1],
[-1, 1, -1, 1, -1, -1, 1, 1, 1],
[-1, 1, -1, 1, -1, 1, -1, -1, -1],
[-1, 1, -1, 1, -1, 1, -1, -1, 1],
[-1, 1, -1, 1, -1, 1, -1, 1, -1],
[-1, 1, -1, 1, -1, 1, -1, 1, 1],
[-1, 1, -1, 1, -1, 1, 1, -1, -1],
[-1, 1, -1, 1, -1, 1, 1, -1, 1],
[-1, 1, -1, 1, -1, 1, 1, 1, -1],
[-1, 1, -1, 1, -1, 1, 1, 1, 1],
[-1, 1, -1, 1, 1, -1, -1, -1, -1],
[-1, 1, -1, 1, 1, -1, -1, -1, 1],
[-1, 1, -1, 1, 1, -1, -1, 1, -1],
[-1, 1, -1, 1, 1, -1, -1, 1, 1],
[-1, 1, -1, 1, 1, -1, 1, -1, -1],
[-1, 1, -1, 1, 1, -1, 1, -1, 1],
[-1, 1, -1, 1, 1, -1, 1, 1, -1],
[-1, 1, -1, 1, 1, -1, 1, 1, 1],
[-1, 1, -1, 1, 1, 1, -1, -1, -1],
[-1, 1, -1, 1, 1, 1, -1, -1, 1],
[-1, 1, -1, 1, 1, 1, -1, 1, -1],
[-1, 1, -1, 1, 1, 1, -1, 1, 1],
[-1, 1, -1, 1, 1, 1, 1, -1, -1],
[-1, 1, -1, 1, 1, 1, 1, -1, 1],
[-1, 1, -1, 1, 1, 1, 1, 1, -1],
[-1, 1, -1, 1, 1, 1, 1, 1, 1],
[-1, 1, 1, -1, -1, -1, -1, -1, -1],
[-1, 1, 1, -1, -1, -1, -1, -1, 1],
[-1, 1, 1, -1, -1, -1, -1, 1, -1],
[-1, 1, 1, -1, -1, -1, -1, 1, 1],
[-1, 1, 1, -1, -1, -1, 1, -1, -1],
[-1, 1, 1, -1, -1, -1, 1, -1, 1],
[-1, 1, 1, -1, -1, -1, 1, 1, -1],
[-1, 1, 1, -1, -1, -1, 1, 1, 1],
[-1, 1, 1, -1, -1, 1, -1, -1, -1],
[-1, 1, 1, -1, -1, 1, -1, -1, 1],
[-1, 1, 1, -1, -1, 1, -1, 1, -1],
[-1, 1, 1, -1, -1, 1, -1, 1, 1],
[-1, 1, 1, -1, -1, 1, 1, -1, -1],
[-1, 1, 1, -1, -1, 1, 1, -1, 1],
[-1, 1, 1, -1, -1, 1, 1, 1, -1],
[-1, 1, 1, -1, -1, 1, 1, 1, 1],
[-1, 1, 1, -1, 1, -1, -1, -1, -1],
[-1, 1, 1, -1, 1, -1, -1, -1, 1],
[-1, 1, 1, -1, 1, -1, -1, 1, -1],
[-1, 1, 1, -1, 1, -1, -1, 1, 1],
[-1, 1, 1, -1, 1, -1, 1, -1, -1],
[-1, 1, 1, -1, 1, -1, 1, -1, 1],
[-1, 1, 1, -1, 1, -1, 1, 1, -1],
[-1, 1, 1, -1, 1, -1, 1, 1, 1],
[-1, 1, 1, -1, 1, 1, -1, -1, -1],
[-1, 1, 1, -1, 1, 1, -1, -1, 1],
[-1, 1, 1, -1, 1, 1, -1, 1, -1],
[-1, 1, 1, -1, 1, 1, -1, 1, 1],
[-1, 1, 1, -1, 1, 1, 1, -1, -1],
[-1, 1, 1, -1, 1, 1, 1, -1, 1],
[-1, 1, 1, -1, 1, 1, 1, 1, -1],
[-1, 1, 1, -1, 1, 1, 1, 1, 1],
[-1, 1, 1, 1, -1, -1, -1, -1, -1],
[-1, 1, 1, 1, -1, -1, -1, -1, 1],
[-1, 1, 1, 1, -1, -1, -1, 1, -1],
[-1, 1, 1, 1, -1, -1, -1, 1, 1],
[-1, 1, 1, 1, -1, -1, 1, -1, -1],
[-1, 1, 1, 1, -1, -1, 1, -1, 1],
[-1, 1, 1, 1, -1, -1, 1, 1, -1],
[-1, 1, 1, 1, -1, -1, 1, 1, 1],
[-1, 1, 1, 1, -1, 1, -1, -1, -1],
[-1, 1, 1, 1, -1, 1, -1, -1, 1],
[-1, 1, 1, 1, -1, 1, -1, 1, -1],
[-1, 1, 1, 1, -1, 1, -1, 1, 1],
[-1, 1, 1, 1, -1, 1, 1, -1, -1],
[-1, 1, 1, 1, -1, 1, 1, -1, 1],
[-1, 1, 1, 1, -1, 1, 1, 1, -1],
[-1, 1, 1, 1, -1, 1, 1, 1, 1],
[-1, 1, 1, 1, 1, -1, -1, -1, -1],
[-1, 1, 1, 1, 1, -1, -1, -1, 1],
[-1, 1, 1, 1, 1, -1, -1, 1, -1],
[-1, 1, 1, 1, 1, -1, -1, 1, 1],
[-1, 1, 1, 1, 1, -1, 1, -1, -1],
[-1, 1, 1, 1, 1, -1, 1, -1, 1],
[-1, 1, 1, 1, 1, -1, 1, 1, -1],
[-1, 1, 1, 1, 1, -1, 1, 1, 1],
[-1, 1, 1, 1, 1, 1, -1, -1, -1],
[-1, 1, 1, 1, 1, 1, -1, -1, 1],
[-1, 1, 1, 1, 1, 1, -1, 1, -1],
[-1, 1, 1, 1, 1, 1, -1, 1, 1],
[-1, 1, 1, 1, 1, 1, 1, -1, -1],
[-1, 1, 1, 1, 1, 1, 1, -1, 1],
[-1, 1, 1, 1, 1, 1, 1, 1, -1],
[-1, 1, 1, 1, 1, 1, 1, 1, 1],
[1, -1, -1, -1, -1, -1, -1, -1, -1],
[1, -1, -1, -1, -1, -1, -1, -1, 1],
[1, -1, -1, -1, -1, -1, -1, 1, -1],
[1, -1, -1, -1, -1, -1, -1, 1, 1],
[1, -1, -1, -1, -1, -1, 1, -1, -1],
[1, -1, -1, -1, -1, -1, 1, -1, 1],
[1, -1, -1, -1, -1, -1, 1, 1, -1],
[1, -1, -1, -1, -1, -1, 1, 1, 1],
[1, -1, -1, -1, -1, 1, -1, -1, -1],
[1, -1, -1, -1, -1, 1, -1, -1, 1],
[1, -1, -1, -1, -1, 1, -1, 1, -1],
[1, -1, -1, -1, -1, 1, -1, 1, 1],
[1, -1, -1, -1, -1, 1, 1, -1, -1],
[1, -1, -1, -1, -1, 1, 1, -1, 1],
[1, -1, -1, -1, -1, 1, 1, 1, -1],
[1, -1, -1, -1, -1, 1, 1, 1, 1],
[1, -1, -1, -1, 1, -1, -1, -1, -1],
[1, -1, -1, -1, 1, -1, -1, -1, 1],
[1, -1, -1, -1, 1, -1, -1, 1, -1],
[1, -1, -1, -1, 1, -1, -1, 1, 1],
[1, -1, -1, -1, 1, -1, 1, -1, -1],
[1, -1, -1, -1, 1, -1, 1, -1, 1],
[1, -1, -1, -1, 1, -1, 1, 1, -1],
[1, -1, -1, -1, 1, -1, 1, 1, 1],
[1, -1, -1, -1, 1, 1, -1, -1, -1],
[1, -1, -1, -1, 1, 1, -1, -1, 1],
[1, -1, -1, -1, 1, 1, -1, 1, -1],
[1, -1, -1, -1, 1, 1, -1, 1, 1],
[1, -1, -1, -1, 1, 1, 1, -1, -1],
[1, -1, -1, -1, 1, 1, 1, -1, 1],
[1, -1, -1, -1, 1, 1, 1, 1, -1],
[1, -1, -1, -1, 1, 1, 1, 1, 1],
[1, -1, -1, 1, -1, -1, -1, -1, -1],
[1, -1, -1, 1, -1, -1, -1, -1, 1],
[1, -1, -1, 1, -1, -1, -1, 1, -1],
[1, -1, -1, 1, -1, -1, -1, 1, 1],
[1, -1, -1, 1, -1, -1, 1, -1, -1],
[1, -1, -1, 1, -1, -1, 1, -1, 1],
[1, -1, -1, 1, -1, -1, 1, 1, -1],
[1, -1, -1, 1, -1, -1, 1, 1, 1],
[1, -1, -1, 1, -1, 1, -1, -1, -1],
[1, -1, -1, 1, -1, 1, -1, -1, 1],
[1, -1, -1, 1, -1, 1, -1, 1, -1],
[1, -1, -1, 1, -1, 1, -1, 1, 1],
[1, -1, -1, 1, -1, 1, 1, -1, -1],
[1, -1, -1, 1, -1, 1, 1, -1, 1],
[1, -1, -1, 1, -1, 1, 1, 1, -1],
[1, -1, -1, 1, -1, 1, 1, 1, 1],
[1, -1, -1, 1, 1, -1, -1, -1, -1],
[1, -1, -1, 1, 1, -1, -1, -1, 1],
[1, -1, -1, 1, 1, -1, -1, 1, -1],
[1, -1, -1, 1, 1, -1, -1, 1, 1],
[1, -1, -1, 1, 1, -1, 1, -1, -1],
[1, -1, -1, 1, 1, -1, 1, -1, 1],
[1, -1, -1, 1, 1, -1, 1, 1, -1],
[1, -1, -1, 1, 1, -1, 1, 1, 1],
[1, -1, -1, 1, 1, 1, -1, -1, -1],
[1, -1, -1, 1, 1, 1, -1, -1, 1],
[1, -1, -1, 1, 1, 1, -1, 1, -1],
[1, -1, -1, 1, 1, 1, -1, 1, 1],
[1, -1, -1, 1, 1, 1, 1, -1, -1],
[1, -1, -1, 1, 1, 1, 1, -1, 1],
[1, -1, -1, 1, 1, 1, 1, 1, -1],
[1, -1, -1, 1, 1, 1, 1, 1, 1],
[1, -1, 1, -1, -1, -1, -1, -1, -1],
[1, -1, 1, -1, -1, -1, -1, -1, 1],
[1, -1, 1, -1, -1, -1, -1, 1, -1],
[1, -1, 1, -1, -1, -1, -1, 1, 1],
[1, -1, 1, -1, -1, -1, 1, -1, -1],
[1, -1, 1, -1, -1, -1, 1, -1, 1],
[1, -1, 1, -1, -1, -1, 1, 1, -1],
[1, -1, 1, -1, -1, -1, 1, 1, 1],
[1, -1, 1, -1, -1, 1, -1, -1, -1],
[1, -1, 1, -1, -1, 1, -1, -1, 1],
[1, -1, 1, -1, -1, 1, -1, 1, -1],
[1, -1, 1, -1, -1, 1, -1, 1, 1],
[1, -1, 1, -1, -1, 1, 1, -1, -1],
[1, -1, 1, -1, -1, 1, 1, -1, 1],
[1, -1, 1, -1, -1, 1, 1, 1, -1],
[1, -1, 1, -1, -1, 1, 1, 1, 1],
[1, -1, 1, -1, 1, -1, -1, -1, -1],
[1, -1, 1, -1, 1, -1, -1, -1, 1],
[1, -1, 1, -1, 1, -1, -1, 1, -1],
[1, -1, 1, -1, 1, -1, -1, 1, 1],
[1, -1, 1, -1, 1, -1, 1, -1, -1],
[1, -1, 1, -1, 1, -1, 1, -1, 1],
[1, -1, 1, -1, 1, -1, 1, 1, -1],
[1, -1, 1, -1, 1, -1, 1, 1, 1],
[1, -1, 1, -1, 1, 1, -1, -1, -1],
[1, -1, 1, -1, 1, 1, -1, -1, 1],
[1, -1, 1, -1, 1, 1, -1, 1, -1],
[1, -1, 1, -1, 1, 1, -1, 1, 1],
[1, -1, 1, -1, 1, 1, 1, -1, -1],
[1, -1, 1, -1, 1, 1, 1, -1, 1],
[1, -1, 1, -1, 1, 1, 1, 1, -1],
[1, -1, 1, -1, 1, 1, 1, 1, 1],
[1, -1, 1, 1, -1, -1, -1, -1, -1],
[1, -1, 1, 1, -1, -1, -1, -1, 1],
[1, -1, 1, 1, -1, -1, -1, 1, -1],
[1, -1, 1, 1, -1, -1, -1, 1, 1],
[1, -1, 1, 1, -1, -1, 1, -1, -1],
[1, -1, 1, 1, -1, -1, 1, -1, 1],
[1, -1, 1, 1, -1, -1, 1, 1, -1],
[1, -1, 1, 1, -1, -1, 1, 1, 1],
[1, -1, 1, 1, -1, 1, -1, -1, -1],
[1, -1, 1, 1, -1, 1, -1, -1, 1],
[1, -1, 1, 1, -1, 1, -1, 1, -1],
[1, -1, 1, 1, -1, 1, -1, 1, 1],
[1, -1, 1, 1, -1, 1, 1, -1, -1],
[1, -1, 1, 1, -1, 1, 1, -1, 1],
[1, -1, 1, 1, -1, 1, 1, 1, -1],
[1, -1, 1, 1, -1, 1, 1, 1, 1],
[1, -1, 1, 1, 1, -1, -1, -1, -1],
[1, -1, 1, 1, 1, -1, -1, -1, 1],
[1, -1, 1, 1, 1, -1, -1, 1, -1],
[1, -1, 1, 1, 1, -1, -1, 1, 1],
[1, -1, 1, 1, 1, -1, 1, -1, -1],
[1, -1, 1, 1, 1, -1, 1, -1, 1],
[1, -1, 1, 1, 1, -1, 1, 1, -1],
[1, -1, 1, 1, 1, -1, 1, 1, 1],
[1, -1, 1, 1, 1, 1, -1, -1, -1],
[1, -1, 1, 1, 1, 1, -1, -1, 1],
[1, -1, 1, 1, 1, 1, -1, 1, -1],
[1, -1, 1, 1, 1, 1, -1, 1, 1],
[1, -1, 1, 1, 1, 1, 1, -1, -1],
[1, -1, 1, 1, 1, 1, 1, -1, 1],
[1, -1, 1, 1, 1, 1, 1, 1, -1],
[1, -1, 1, 1, 1, 1, 1, 1, 1],
[1, 1, -1, -1, -1, -1, -1, -1, -1],
[1, 1, -1, -1, -1, -1, -1, -1, 1],
[1, 1, -1, -1, -1, -1, -1, 1, -1],
[1, 1, -1, -1, -1, -1, -1, 1, 1],
[1, 1, -1, -1, -1, -1, 1, -1, -1],
[1, 1, -1, -1, -1, -1, 1, -1, 1],
[1, 1, -1, -1, -1, -1, 1, 1, -1],
[1, 1, -1, -1, -1, -1, 1, 1, 1],
[1, 1, -1, -1, -1, 1, -1, -1, -1],
[1, 1, -1, -1, -1, 1, -1, -1, 1],
[1, 1, -1, -1, -1, 1, -1, 1, -1],
[1, 1, -1, -1, -1, 1, -1, 1, 1],
[1, 1, -1, -1, -1, 1, 1, -1, -1],
[1, 1, -1, -1, -1, 1, 1, -1, 1],
[1, 1, -1, -1, -1, 1, 1, 1, -1],
[1, 1, -1, -1, -1, 1, 1, 1, 1],
[1, 1, -1, -1, 1, -1, -1, -1, -1],
[1, 1, -1, -1, 1, -1, -1, -1, 1],
[1, 1, -1, -1, 1, -1, -1, 1, -1],
[1, 1, -1, -1, 1, -1, -1, 1, 1],
[1, 1, -1, -1, 1, -1, 1, -1, -1],
[1, 1, -1, -1, 1, -1, 1, -1, 1],
[1, 1, -1, -1, 1, -1, 1, 1, -1],
[1, 1, -1, -1, 1, -1, 1, 1, 1],
[1, 1, -1, -1, 1, 1, -1, -1, -1],
[1, 1, -1, -1, 1, 1, -1, -1, 1],
[1, 1, -1, -1, 1, 1, -1, 1, -1],
[1, 1, -1, -1, 1, 1, -1, 1, 1],
[1, 1, -1, -1, 1, 1, 1, -1, -1],
[1, 1, -1, -1, 1, 1, 1, -1, 1],
[1, 1, -1, -1, 1, 1, 1, 1, -1],
[1, 1, -1, -1, 1, 1, 1, 1, 1],
[1, 1, -1, 1, -1, -1, -1, -1, -1],
[1, 1, -1, 1, -1, -1, -1, -1, 1],
[1, 1, -1, 1, -1, -1, -1, 1, -1],
[1, 1, -1, 1, -1, -1, -1, 1, 1],
[1, 1, -1, 1, -1, -1, 1, -1, -1],
[1, 1, -1, 1, -1, -1, 1, -1, 1],
[1, 1, -1, 1, -1, -1, 1, 1, -1],
[1, 1, -1, 1, -1, -1, 1, 1, 1],
[1, 1, -1, 1, -1, 1, -1, -1, -1],
[1, 1, -1, 1, -1, 1, -1, -1, 1],
[1, 1, -1, 1, -1, 1, -1, 1, -1],
[1, 1, -1, 1, -1, 1, -1, 1, 1],
[1, 1, -1, 1, -1, 1, 1, -1, -1],
[1, 1, -1, 1, -1, 1, 1, -1, 1],
[1, 1, -1, 1, -1, 1, 1, 1, -1],
[1, 1, -1, 1, -1, 1, 1, 1, 1],
[1, 1, -1, 1, 1, -1, -1, -1, -1],
[1, 1, -1, 1, 1, -1, -1, -1, 1],
[1, 1, -1, 1, 1, -1, -1, 1, -1],
[1, 1, -1, 1, 1, -1, -1, 1, 1],
[1, 1, -1, 1, 1, -1, 1, -1, -1],
[1, 1, -1, 1, 1, -1, 1, -1, 1],
[1, 1, -1, 1, 1, -1, 1, 1, -1],
[1, 1, -1, 1, 1, -1, 1, 1, 1],
[1, 1, -1, 1, 1, 1, -1, -1, -1],
[1, 1, -1, 1, 1, 1, -1, -1, 1],
[1, 1, -1, 1, 1, 1, -1, 1, -1],
[1, 1, -1, 1, 1, 1, -1, 1, 1],
[1, 1, -1, 1, 1, 1, 1, -1, -1],
[1, 1, -1, 1, 1, 1, 1, -1, 1],
[1, 1, -1, 1, 1, 1, 1, 1, -1],
[1, 1, -1, 1, 1, 1, 1, 1, 1],
[1, 1, 1, -1, -1, -1, -1, -1, -1],
[1, 1, 1, -1, -1, -1, -1, -1, 1],
[1, 1, 1, -1, -1, -1, -1, 1, -1],
[1, 1, 1, -1, -1, -1, -1, 1, 1],
[1, 1, 1, -1, -1, -1, 1, -1, -1],
[1, 1, 1, -1, -1, -1, 1, -1, 1],
[1, 1, 1, -1, -1, -1, 1, 1, -1],
[1, 1, 1, -1, -1, -1, 1, 1, 1],
[1, 1, 1, -1, -1, 1, -1, -1, -1],
[1, 1, 1, -1, -1, 1, -1, -1, 1],
[1, 1, 1, -1, -1, 1, -1, 1, -1],
[1, 1, 1, -1, -1, 1, -1, 1, 1],
[1, 1, 1, -1, -1, 1, 1, -1, -1],
[1, 1, 1, -1, -1, 1, 1, -1, 1],
[1, 1, 1, -1, -1, 1, 1, 1, -1],
[1, 1, 1, -1, -1, 1, 1, 1, 1],
[1, 1, 1, -1, 1, -1, -1, -1, -1],
[1, 1, 1, -1, 1, -1, -1, -1, 1],
[1, 1, 1, -1, 1, -1, -1, 1, -1],
[1, 1, 1, -1, 1, -1, -1, 1, 1],
[1, 1, 1, -1, 1, -1, 1, -1, -1],
[1, 1, 1, -1, 1, -1, 1, -1, 1],
[1, 1, 1, -1, 1, -1, 1, 1, -1],
[1, 1, 1, -1, 1, -1, 1, 1, 1],
[1, 1, 1, -1, 1, 1, -1, -1, -1],
[1, 1, 1, -1, 1, 1, -1, -1, 1],
[1, 1, 1, -1, 1, 1, -1, 1, -1],
[1, 1, 1, -1, 1, 1, -1, 1, 1],
[1, 1, 1, -1, 1, 1, 1, -1, -1],
[1, 1, 1, -1, 1, 1, 1, -1, 1],
[1, 1, 1, -1, 1, 1, 1, 1, -1],
[1, 1, 1, -1, 1, 1, 1, 1, 1],
[1, 1, 1, 1, -1, -1, -1, -1, -1],
[1, 1, 1, 1, -1, -1, -1, -1, 1],
[1, 1, 1, 1, -1, -1, -1, 1, -1],
[1, 1, 1, 1, -1, -1, -1, 1, 1],
[1, 1, 1, 1, -1, -1, 1, -1, -1],
[1, 1, 1, 1, -1, -1, 1, -1, 1],
[1, 1, 1, 1, -1, -1, 1, 1, -1],
[1, 1, 1, 1, -1, -1, 1, 1, 1],
[1, 1, 1, 1, -1, 1, -1, -1, -1],
[1, 1, 1, 1, -1, 1, -1, -1, 1],
[1, 1, 1, 1, -1, 1, -1, 1, -1],
[1, 1, 1, 1, -1, 1, -1, 1, 1],
[1, 1, 1, 1, -1, 1, 1, -1, -1],
[1, 1, 1, 1, -1, 1, 1, -1, 1],
[1, 1, 1, 1, -1, 1, 1, 1, -1],
[1, 1, 1, 1, -1, 1, 1, 1, 1],
[1, 1, 1, 1, 1, -1, -1, -1, -1],
[1, 1, 1, 1, 1, -1, -1, -1, 1],
[1, 1, 1, 1, 1, -1, -1, 1, -1],
[1, 1, 1, 1, 1, -1, -1, 1, 1],
[1, 1, 1, 1, 1, -1, 1, -1, -1],
[1, 1, 1, 1, 1, -1, 1, -1, 1],
[1, 1, 1, 1, 1, -1, 1, 1, -1],
[1, 1, 1, 1, 1, -1, 1, 1, 1],
[1, 1, 1, 1, 1, 1, -1, -1, -1],
[1, 1, 1, 1, 1, 1, -1, -1, 1],
[1, 1, 1, 1, 1, 1, -1, 1, -1],
[1, 1, 1, 1, 1, 1, -1, 1, 1],
[1, 1, 1, 1, 1, 1, 1, -1, -1],
[1, 1, 1, 1, 1, 1, 1, -1, 1],
[1, 1, 1, 1, 1, 1, 1, 1, -1],
[1, 1, 1, 1, 1, 1, 1, 1, 1]]

let t
let t

w_ant = [[0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0]];
b_ant = [0,0];
w_novo = w_ant;
b_novo = b_ant;
teta = 0; /* Limiar da função de ativação */
alfa = 1; /* Taxa de aprendizagem */
trocou = 1; /* Sinaliza mudança dos pesos */
ciclos = 0; /* Contador para número de ciclos de treinamento */

/* Apresentação das entradas enquanto houver mudança de pessos */
let y_liquido = 0;
let y = 0;

function gera_rede(neuronio, t)
{
    while(trocou == 1)
    {
        trocou = 0;
        ciclos += 1;
        console.log(`\nCiclo ${ciclos} => `);
        for(entrada = 0; entrada < 512; entrada++)
        {
            y_liquido = w_ant[0][neuronio] * x[entrada][0] + w_ant[1][neuronio]*x[entrada][1] + w_ant[2][neuronio]*x[entrada][2] + w_ant[3][neuronio]*x[entrada][3] + w_ant[4][neuronio]*x[entrada][4] + w_ant[5][neuronio]*x[entrada][5] + w_ant[6][neuronio]*x[entrada][6] + w_ant[7][neuronio]*x[entrada][7] + w_ant[8][neuronio]*x[entrada][8] + b_ant[neuronio];
            /*
                Aplicação da função de ativação/degrau
                Calcula a resposta y da rede neural
            */
            y = 0;
            if (y_liquido >= teta)
                y = 1;
            else
                y = -1;

            if (y != t[entrada])
            {
                trocou = 1;
                w_novo[0][neuronio] = w_ant[0][neuronio] + alfa * x[entrada][0] * t[entrada];
                w_novo[1][neuronio] = w_ant[1][neuronio] + alfa * x[entrada][1] * t[entrada];
                w_novo[2][neuronio] = w_ant[2][neuronio] + alfa * x[entrada][2] * t[entrada];
                w_novo[3][neuronio] = w_ant[3][neuronio] + alfa * x[entrada][3] * t[entrada];
                w_novo[4][neuronio] = w_ant[4][neuronio] + alfa * x[entrada][4] * t[entrada];
                w_novo[5][neuronio] = w_ant[5][neuronio] + alfa * x[entrada][5] * t[entrada];
                w_novo[6][neuronio] = w_ant[6][neuronio] + alfa * x[entrada][6] * t[entrada];
                w_novo[7][neuronio] = w_ant[7][neuronio] + alfa * x[entrada][7] * t[entrada];
                w_novo[8][neuronio] = w_ant[8][neuronio] + alfa * x[entrada][8] * t[entrada];
                b_novo[neuronio] = b_ant[neuronio] + alfa * t[entrada];
                w_ant = w_novo;
                b_ant = b_novo;
            }
        }
        console.log(`w_novo: ${w_novo}, b_novo: ${b_novo}`);
    }
    trocou = 1;
}

gera_rede(0, t1);
gera_rede(1, t2);


/* 
    *******************************************************
    Relacionado a interface
    *******************************************************
*/
let ent = [-1,-1,-1,-1,-1,-1,-1,-1,-1]

function fn_muda_estilo(id, index)
{
    document.getElementById(id).style.backgroundColor = "#086970";
    document.getElementById(id).style.transition = "0.2s";
    ent[index] = 1;
}

function testa_rede()
{
    let saida1 = w_novo[0][0]*ent[0] + w_novo[1][0]*ent[1] + w_novo[2][0]*ent[2] + w_novo[3][0]*ent[3] + w_novo[4][0]*ent[4] + w_novo[5][0]*ent[5] + w_novo[6][0]*ent[6] + w_novo[7][0]*ent[7] + w_novo[8][0]*ent[8] + b_novo[0];
    let saida2 = w_novo[0][1]*ent[0] + w_novo[1][1]*ent[1] + w_novo[2][1]*ent[2] + w_novo[3][1]*ent[3] + w_novo[4][1]*ent[4] + w_novo[5][1]*ent[5] + w_novo[6][1]*ent[6] + w_novo[7][1]*ent[7] + w_novo[8][1]*ent[8] + b_novo[0];
    if(saida1 >= teta && saida2 < teta)
        document.getElementById("Resultado").innerText = "Saída: Letra L reconecida"
    else if(saida1 < teta && saida2 >= teta)
        document.getElementById("Resultado").innerText = "Saída: Letra U reconecida"
    else
    document.getElementById("Resultado").innerText = "Saída: Letra não reconhecida"
}
